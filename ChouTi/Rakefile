require 'colorize'

WORKSPACE="ChouTi.xcworkspace"
IOS_FRAMEWORK_SCHEME="ChouTi iOS"
IOS_EXAMPLE_SCHEME="ChouTi Example iOS"
DESTINATION="OS=12.0,name=iPhone XS Max"

begin
  tools = `xcode-select -p`
  raise "You must have Xcode command line tools installed. try `xcode-select --install`" if $?.exitstatus != 0

  swift_version = "Apple Swift version 4.2"
  tools = `xcrun swiftc --version`
  raise "Incorrect Xcode installed. This project uses #{swift_version}, current swift version: #{tools}" if (tools <=> swift_version) != 1

  tools = `gem which bundler`
  raise "You must have bundler. `gem install bundler`" if $?.exitstatus != 0
end

task :default do
  # Check the build Environment
  `bundle check > /dev/null`
  if $?.exitstatus != 0
    sh "rake setup"
  end

  sh "pod install"
  sh "rake sort_xcode_project_files"
  sh "open ./ChouTi.xcworkspace"
end

#-------------------------------------------------------------------------------
# Setup Environment
#-------------------------------------------------------------------------------

desc "Setup the build tools environment."
task :setup do
  puts "* Installing Build Tools"
  sh "bundle install"
end

desc "sort Xcode project files"
task :sort_xcode_project_files do
  sh "perl ./Scripts/sort-Xcode-project-file ./ChouTi.xcodeproj"
end

#-------------------------------------------------------------------------------
# Development Tasks
#-------------------------------------------------------------------------------

desc "Build for Debug and Release."
task :build => [:build_debug, :build_release]

desc "Build for Debug."
task :build_debug do
  sh "xcodebuild clean build -workspace '#{WORKSPACE}' -scheme '#{IOS_FRAMEWORK_SCHEME}' -destination '#{DESTINATION}' -configuration Debug | xcpretty"
end

desc "Build for Release."
task :build_release do
  sh "xcodebuild clean build -workspace '#{WORKSPACE}' -scheme '#{IOS_FRAMEWORK_SCHEME}' -destination '#{DESTINATION}' -configuration Release | xcpretty"
end

desc "Run tests."
task :test => [:test_framework, :test_ui]

desc "Run framework tests."
task :test_framework do
  sh "xcodebuild clean test -workspace '#{WORKSPACE}' -scheme '#{IOS_FRAMEWORK_SCHEME}' -destination '#{DESTINATION}' -configuration Debug | xcpretty"
end

desc "Run UI tests."
task :test_ui do
  sh "xcodebuild clean test -workspace '#{WORKSPACE}' -scheme '#{IOS_EXAMPLE_SCHEME}' -destination '#{DESTINATION}' -configuration Release | xcpretty"
end

desc "Lint Swift code."
task :lint do
  sh "Pods/SwiftLint/swiftlint"
end

desc "Correct Swift code."
task :autocorrect do
  sh "Pods/SwiftLint/swiftlint autocorrect"
end

#-------------------------------------------------------------------------------
# Publish Pod
#-------------------------------------------------------------------------------

desc "Lint pod locally."
task :pod_lib_lint do
  sh "pod cache clean --all --verbose"
  sh "pod lib lint ../ChouTi.podspec --verbose"
end

desc "Lint pod remotely."
task :pod_spec_lint do
  sh "pod cache clean --all --verbose"
  sh "pod spec lint ../ChouTi.podspec --verbose"
end

desc "Publish pod."
task :pod_publish do
  sh "pod cache clean --all --verbose"
  sh "pod trunk push ../ChouTi.podspec --verbose"
end

#-------------------------------------------------------------------------------
# Update Dependencies
#-------------------------------------------------------------------------------

desc "Update all dependencies and libraries."
task :update => [:update_submodules, :update_pods]

desc "Update git submodules."
task :update_submodules do
  puts "*** Pulling Git submodules ***".colorize(:light_blue)
  sh "git submodule update --init --recursive"
end

desc "Update pods with repo update."
task :update_pods  do
    puts "*** Installing CocoaPods dependencies ***".colorize(:light_blue)
    sh "pod repo update"
    sh "pod install"
end

#-------------------------------------------------------------------------------
# Clean
#-------------------------------------------------------------------------------

desc "Clean Xcode derived data and pods."
task :clean => [:clean_pods, :clean_xcode]

desc "Clean pods."
task :clean_pods do
  puts "*** Cleaning Fetched CocoaPods ***".colorize(:light_blue)
  sh "rm -rf Pods"

  if File.file?('Podfile.lock') == true
    puts "*** Killing Podfile.lock ***".colorize(:light_blue)
    sh "rm Podfile.lock"
  end
end

desc "Clean Xcodes derived data."
task :clean_xcode do
  puts "*** Cleaning Derived Data ***".colorize(:light_blue)
  sh "rm -rf ~/Library/Developer/Xcode/DerivedData/iOSScoreESports-*"

  puts "*** Cleaning Module Cache ***".colorize(:light_blue)
  sh "rm -rf ~/Library/Developer/Xcode/DerivedData/ModuleCache"
end
