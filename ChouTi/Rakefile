require 'colorize'

WORKSPACE="ChouTi.xcworkspace"
IOS_FRAMEWORK_SCHEME="ChouTi iOS"
IOS_EXAMPLE_SCHEME="ChouTi Example iOS"
DESTINATION="OS=12.0,name=iPhone XS Max"

begin
  tools = `xcode-select -p`
  raise "You must have Xcode command line tools installed. try `xcode-select --install`" if $?.exitstatus != 0

  swift_version = "Apple Swift version 4.2"
  tools = `xcrun swiftc --version`
  raise "Incorrect Xcode installed. This project uses #{swift_version}, current swift version: #{tools}" if (tools <=> swift_version) != 1

  tools = `gem which bundler`
  raise "You must have bundler. `gem install bundler`" if $?.exitstatus != 0
end

#-------------------------------------------------------------------------------
# Rake Tasks
#-------------------------------------------------------------------------------
task :default do
  # Check the build Environment
  `bundle check > /dev/null`
  if $?.exitstatus != 0
    sh "rake setup"
  end

  sh "rake fetch"
end

task :build do
  sh "xcodebuild clean build -workspace '#{WORKSPACE}' -scheme '#{IOS_FRAMEWORK_SCHEME}' -destination '#{DESTINATION}' -configuration Debug | xcpretty"
end

task :release do
  sh "xcodebuild clean build -workspace '#{WORKSPACE}' -scheme '#{IOS_FRAMEWORK_SCHEME}' -destination '#{DESTINATION}' -configuration Release | xcpretty"
end

task :test do
  sh "xcodebuild clean test -workspace '#{WORKSPACE}' -scheme '#{IOS_FRAMEWORK_SCHEME}' -destination '#{DESTINATION}' -configuration Debug | xcpretty"
end

task :test_ui do
  sh "xcodebuild clean test -workspace '#{WORKSPACE}' -scheme '#{IOS_EXAMPLE_SCHEME}' -destination '#{DESTINATION}' -configuration Release | xcpretty"
end

#-------------------------------------------------------------------------------
# Build environment
#-------------------------------------------------------------------------------
desc "Setup the build tools environment"
task :setup do
  puts "* Installing Build Tools"
  sh "bundle install"
end

#-------------------------------------------------------------------------------
# Fetch Resources
#-------------------------------------------------------------------------------
desc "Fetch all dependencies and libraries"
task :fetch => [:submodules, :pods]

desc "Run pod install "
task :pods  do
    puts "*** Installing CocoaPods dependencies ***".colorize(:light_blue)
    sh "pod repo update"
    sh "pod install"
end

desc "Fetch git submodules used by the app"
task :submodules do
  puts "*** Pulling Git submodules ***".colorize(:light_blue)
  sh "git submodule update --init --recursive"
end

#-------------------------------------------------------------------------------
# Clean
#-------------------------------------------------------------------------------

desc "Clean Xcode and Cocoapods."
task :clean_all => [:clean_pods, :clean_xcode]

desc "Clean the Pods environment"
task :clean_pods do
  puts "*** Cleaning Fetched Cocoapods ***".colorize(:light_blue)
  sh "rm -rf Pods"

  if File.file?('Podfile.lock') == true
    puts "*** Killing Podfile.lock ***".colorize(:light_blue)
    sh "rm Podfile.lock"
  end
end

desc "Clean Xcodes Derived Data"
task :clean_xcode do
  puts "*** Cleaning Derived Data ***".colorize(:light_blue)
  sh "rm -rf ~/Library/Developer/Xcode/DerivedData/iOSScoreESports-*"

  puts "*** Cleaning Module Cache ***".colorize(:light_blue)
  sh "rm -rf ~/Library/Developer/Xcode/DerivedData/ModuleCache"
end
